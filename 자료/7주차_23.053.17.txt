Spring Initializr 셋팅
ij > file > new Project > Spring Initializr

java / Maven /

spring1

spring bootdevtools / lombok

spring1



	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

----------------------------------------------------
spring3-1, 3-2, 4
라이브러리 추가하기
https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui


		<!-- https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui -->
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.1.0</version>
		</dependency>

----------------------------------------------------

package com.green.first.work;

//bean 등록

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/work")
public class WorkController {

}

// Controller 결과가 화면
// RestController 결과가 JSON

// /work로 주소값이 들어오면 잡겠다


>>>>>>>>>>>>>>>>>>

//bean 등록

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/work")
public class WorkController {
    
    @GetMapping("/work1")
    public String work1() {
        return "contents : work1";
    }
}

spring5
first > open modules settings > 

-----------------------------
package com.green.first2.test;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/test")
public class TestController {

    @GetMapping("/test1")
    public String test1() {
        return "contents : test1";
    }
}

---------------------------------

http://localhost:8080/test/test1



-------------------------------------------------------------------------------

package com.green.first2.work;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/work")
public class WorkController {

    @GetMapping("/hello")
    public String hello() {
        return "<h1>hello</h2>";
    }
}


---------------------------------------------------------------------------
RestfulAPI

http 통신 메소드
post, get, put, delete

DML
DRUD(값을 불러오고 사용하는 개념)

/board

post 처리
get 화면 띄울때..


- 옛날 방식
(get) /login
(post) /login
-> get으로 들어오면 로그인 화면 띄워야지, post로 들어오면 로그인 처리해야지

(get) /board
(get) /boardDetail
(post) /board
(post) /boardMod
(get) /boardDel


- 발전한 방식 오버로딩같은..
(post) /board
(get) /board 리스트 get
(get) /board/1 디테일 get, /경로변수: 패스배리어블
(put) /board
(delete) /board


----------------------------------------------------------------------------

package com.green.first2.board;

import org.springframework.web.bind.annotation.*;

@RestController
public class BoardController {

    @PostMapping("/board")
    public String postBoard() {
        return "글 등록 완료";
    }

    @GetMapping("/board")
    public String getBoard() {
        return "글 리스트 출력";
    }

    @GetMapping("/board/{iboard}")
    public String getBoardDetail(@PathVariable int iboard) {
        return iboard + "글 디테일";
    }

    @PutMapping("/board")
    public String putBoard() {
        return "글 수정 완료";
    }

    @DeleteMapping("/board")
    public String delBoard() {
        return "글 삭제 완료";
    }

}


+++++++++++++++++

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Post Test</h1>
    <a href="http://localhost:8080/test/test1">테스트1 이동</a>
    <a href="http://localhost:8080/board">board 이동</a>
    <a href="http://localhost:8080/board/1">board 1번 글 이동</a>
</body>
</html>


---------------------------------------------------
talend api tester 크롬에서 다운로드

---------------------------------------------------
쿼리 스트링

spring8
검색

https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=1&ie=utf8&query=BTS
에서

where=nexearch&sm=top_hty&fbm=1&ie=utf8&query=BTS
이 부분!!


?로 구분 그리고 key=value &로 추가




package com.green.first2.test;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/test")
public class TestController {

    @GetMapping("/test1")
    public String test1(String name, int age) {

        return String.format("contents : test1, name : %s, age : %d", name, age);
    }

    @GetMapping("/test2")
    public String test2(@RequestParam(required = false) String name
                        , @RequestParam(defaultValue = "0") int age) {
        return String.format("contents : test1, name : %s, age : %d", name, age);
    }
} 

spring9
-------------------------------------------------------------------------
생성

package com.green.first2.board;

public class BoardEntity {
}

>>>>>>>>>>>>

package com.green.first2.board;

public class BoardEntity {
    private int iboard;
    private String title;
    private String ctnt;
    private String writer;
}


>>>>>>>>>>>>

package com.green.first2.board;

import lombok.Getter;

@Getter
@Setter
@ToString
public class BoardEntity {
    private int iboard;
    private String title;
    private String ctnt;
    private String writer;
}

//lomok라이브러리를 이용하면 간단..

++++++++++++++++++++++++

package com.green.first2.board;

import org.springframework.web.bind.annotation.*;

@RestController
public class BoardController {

    @PostMapping("/board")
    public String postBoard(BoardEntity entity) {
        System.out.println(entity);
        return "글 등록 완료";
    }

    @PostMapping(path="/board2")
    @CrossOrigin
    public String postBoard2(@RequestBody BoardEntity entity) {
        System.out.println(entity);
        return "{\"result\": 1}";
    }
//@RequestBody  JSON으로 날아오는 경우에만 넣는다.

    @GetMapping("/board")
    public String getBoard() {
        return "글 리스트 출력";
    }

    @GetMapping("/board/{iboard}")
    public String getBoardDetail(@PathVariable int iboard) {
        return iboard + "글 디테일";
    }

    @PutMapping("/board")
    public String putBoard() {
        return "글 수정 완료";
    }

    @DeleteMapping("/board")
    public String delBoard() {
        return "글 삭제 완료";
    }

}


---------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <form action="http://localhost:8080/board?iboard=1&title=니가가라하와이&ctnt=키는내가더컸다아이가&writer=장동건" method="post">
        <input type="submit" value="전송">
    </form>
    <br>
    <form action="http://localhost:8080/board" method="post">
        <div><input type="text" name="iboard" placeholder="iboard"></div>
        <div><input type="text" name="title" placeholder="제목"></div>
        <div>
            <textarea name="ctnt" placeholder="내용"></textarea>  
        </div>
        <div><input type="text" name="writer" placeholder="작성자"></div>
        <div><input type="submit" value="전송2"></div>
    </form>
    <form id="frm">
        <div><input type="text" name="iboard" placeholder="iboard"></div>
        <div><input type="text" name="title" placeholder="제목"></div>
        <div>
            <textarea name="ctnt" placeholder="내용"></textarea>
        </div>
        <div><input type="text" name="writer" placeholder="작성자"></div>
    </form>
    <div><input id="submit2" type="button" value="전송2"></div>

</body>

<script>
    const $frm = document.querySelector('#frm');
    const $submit2 = document.querySelector("#submit2");
    $submit2.addEventListener('click', function() {
        const iboard = $frm.iboard.value;
        const title = $frm.title.value;
        const ctnt = $frm.ctnt.value;
        const writer = $frm.writer.value;
        const param = {
            iboard, title, ctnt, writer
        }
        fetch('http://localhost:8080/board2', {
            method: 'post',
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(param)
        })
        .then(res => res.json())
        .then(result => {
            console.log(result);
        });
    });
</script>

</html>


--------------------------------------------------------------------------

Restful API
CRUD.. 
다른업무지만 같은 게시판이니까 주소값을 하나로 통일하고 싶어서 사용

(post/get(2)/put(patch)/delete) - / board
put 전체수정
patch 부분수정


get(2)
(get) /board
(get) /board/3
(get) /board/4 /경로변수: 패스배리어블


백엔드에 자료 보내기 위한 방법 3가지
1. get방식 쿼리스트링 주소값 다음?
2. form데이터 <body>
3. 자바스크립트를 JSON <body>{ "aaa": "fff", "bbb: 1 }
4. Path Variable
spring10,10-2


-----------------------------------------------------------------------------
마이바티스...
ctrl + enter


create table t_board(
    iboard int unsigned auto_increment,
    title varchar(100) not null,
    ctnt text not null,
    writer varchar(10) not null,
    created_at datetime default current_timestamp(),
    updated_at datetime default current_timestamp(),
    primary key (iboard)
);

select * from t_board;


----------------------------------------------------
application.properies에서

# db config
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/board

?chacterEncoding=UTF-8&serverTimezone=UTC // 한글 안나올경우 추가

spring.datasource.username=root
spring.datasource.password=green502

# mybatis config
mybatis.type-aliases-package=com.green.board
mybatis.mapper-locations=mybatis/mapper/**/*.xml

//resources > new > Directory


package com.green.board;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/board")
public class BoardController {

    @PostMapping
    public int boradPost(@RequestBody BoardEntity entity) {
        System.out.println(entity);
        return 1;
    }
}


>>>>>>>>>

package com.green.board;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/board")
public class BoardController {

    @PostMapping
    public int boradPost(@RequestBody BoardEntity entity) {
        System.out.println(entity);
        return 1;
    }
}


>>>>>>>>

package com.green.board;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/board")
public class BoardController {

    @Autowired
    private BoardService service; //DI indection 주입

    @PostMapping
    public int boradPost(@RequestBody BoardEntity entity) {
        System.out.println(entity);
        return service.insBoard(entity);
    }
}


>>>>>>>>>>>>>>

package com.green.board;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/board")
public class BoardController {
    private final BoardService service; //DI indection 주입

    @Autowired
    public BoardController(BoardService service){
        this.service = service;
    }


    @PostMapping
    public int boradPost(@RequestBody BoardEntity entity) {
        System.out.println(entity);
        return service.insBoard(entity);
    }
}


+++++++++++++++
생성
package com.green.board;

import lombok.Data;

@Data
public class BoardEntity {
    private int iboard;
    private String title;
    private String ctnt;
    private String writer;
    private String createdAt;
    private String updatedAt;
}

spring18, 19

+++++++++++++++++++
생성
package com.green.board;

import org.springframework.stereotype.Service;

@Service
public class BoardService {

}

>>>>>>>

package com.green.board;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class BoardService {
    private final BoardMapper mapper;

    @Autowired
    public BoardService(BoardMapper mapper) {
        this.mapper = mapper;
    }

    public int insBoard(BoardEntity entity) {
        System.out.println("service-insBoard");
        return 1;
    }
}


+++++++++++++++++
생성

package com.green.board;

import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface BoardMapper {
    
}

>>>>>>>>>>>>>>>

package com.green.board;

import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface BoardMapper {
    void inBoard(BoardEntity entity);
}

//

++++++++++++++++++
생성
resources > BoardMapper.xml

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.board.BoardMapper">

</mapper>

// spring20

>>>>>>>>>>>>>>>>>>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.board.BoardMapper">
    <insert id=" insBoard" parameterType="BoardEntity">
        INSERT INTO t_board
        (title, ctnt, writer)
        VALUES
        (#{title}, #{ctnt}, #{writer})
    </insert>
</mapper>

//spring20...
// #{변수명}은 값을 삽입하겠다, 자동으로 get해서 사용..
// string이면 자동으로' '를 넣어줌
// BoardMapper와 BoardMapper.xml은 셋트
// void inBoard(BoardEntity entity);와 <insert id=" insBoard" >만 같게해주면됨

주석
<!--  -->























































































