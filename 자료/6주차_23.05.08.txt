
mariaDB파일에 command prompt로,...
----------------------
Microsoft Windows [Version 10.0.19045.2846]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\system32>d:

D:\>dir
 D 드라이브의 볼륨: 로컬 디스크
 볼륨 일련 번호: 70D4-E903

 D:\ 디렉터리

2023-04-07  오전 10:17         4,037,192 AnyDesk.exe
2022-05-12  오후 06:15    <DIR>          GHOST
2022-09-17  오전 10:27    <DIR>          PSAutoRecover
2023-05-01  오전 07:05    <DIR>          sakila-db
2023-05-08  오전 09:48           729,523 sakila-db.zip
2023-04-18  오후 04:44    <DIR>          Students
               2개 파일           4,766,715 바이트
               4개 디렉터리  130,193,416,192 바이트 남음

D:\>dir / w
 D 드라이브의 볼륨: 로컬 디스크
 볼륨 일련 번호: 70D4-E903

 D:\ 디렉터리

AnyDesk.exe     [GHOST]         [PSAutoRecover] [sakila-db]     sakila-db.zip   [Students]
               2개 파일           4,766,715 바이트
               4개 디렉터리  130,193,416,192 바이트 남음

D:\>cd sakila-db

D:\sakila-db>mysql -uroot -p
Enter password: ********
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 4
Server version: 10.11.2-MariaDB mariadb.org binary distribution

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> source sakila-schema.sql;
Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.005 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected, 1 warning (0.000 sec)

Query OK, 1 row affected (0.001 sec)

Database changed
Query OK, 0 rows affected (0.012 sec)

Query OK, 0 rows affected (0.008 sec)

Query OK, 0 rows affected (0.008 sec)

Query OK, 0 rows affected (0.008 sec)

Query OK, 0 rows affected (0.008 sec)

Query OK, 0 rows affected (0.010 sec)

Query OK, 0 rows affected (0.010 sec)

Query OK, 0 rows affected (0.009 sec)

Query OK, 0 rows affected (0.009 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.029 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.008 sec)

Query OK, 0 rows affected (0.012 sec)

Query OK, 0 rows affected (0.010 sec)

Query OK, 0 rows affected (0.010 sec)

Query OK, 0 rows affected (0.007 sec)

Query OK, 0 rows affected (0.011 sec)

Query OK, 0 rows affected (0.012 sec)

Query OK, 0 rows affected (0.009 sec)

Query OK, 0 rows affected (0.011 sec)

Query OK, 0 rows affected (0.006 sec)

Query OK, 0 rows affected (0.005 sec)

Query OK, 0 rows affected (0.004 sec)

Query OK, 0 rows affected (0.004 sec)

Query OK, 0 rows affected (0.005 sec)

Query OK, 0 rows affected (0.004 sec)

Query OK, 0 rows affected (0.004 sec)

Query OK, 0 rows affected, 1 warning (0.004 sec)

Query OK, 0 rows affected (0.005 sec)

Query OK, 0 rows affected, 1 warning (0.004 sec)

Query OK, 0 rows affected, 1 warning (0.003 sec)

Query OK, 0 rows affected (0.003 sec)

Query OK, 0 rows affected (0.003 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

MariaDB [sakila]>

D:\sakila-db>mysql -uroot -p
Enter password: ********
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 5
Server version: 10.11.2-MariaDB mariadb.org binary distribution

Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> source sakila-date.sql;
ERROR: Failed to open file 'sakila-date.sql', error: 2
MariaDB [(none)]> source sakila-data.sql;
Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Database changed
Query OK, 0 rows affected (0.000 sec)

Query OK, 200 rows affected (0.006 sec)
Records: 200  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 603 rows affected (0.008 sec)
Records: 603  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 16 rows affected (0.001 sec)
Records: 16  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 600 rows affected (0.005 sec)
Records: 600  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 109 rows affected (0.002 sec)
Records: 109  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 599 rows affected (0.009 sec)
Records: 599  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.002 sec)

Query OK, 0 rows affected (0.007 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 1000 rows affected (0.036 sec)
Records: 1000  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.012 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 5462 rows affected (0.024 sec)
Records: 5462  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.002 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 1000 rows affected (0.005 sec)
Records: 1000  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 4581 rows affected (0.027 sec)
Records: 4581  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.002 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 6 rows affected (0.001 sec)
Records: 6  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 14881 rows affected (0.102 sec)
Records: 14881  Duplicates: 0  Warnings: 0

Query OK, 1163 rows affected (0.012 sec)
Records: 1163  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.006 sec)

Query OK, 0 rows affected (0.007 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 12377 rows affected (0.099 sec)
Records: 12377  Duplicates: 0  Warnings: 0

Query OK, 3667 rows affected (0.039 sec)
Records: 3667  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.008 sec)

Query OK, 0 rows affected (0.009 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.002 sec)

Query OK, 2 rows affected (0.005 sec)
Records: 2  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 2 rows affected (0.001 sec)
Records: 2  Duplicates: 0  Warnings: 0

Query OK, 0 rows affected (0.001 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

Query OK, 0 rows affected (0.000 sec)

MariaDB [sakila]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| java               |
| mysql              |
| performance_schema |
| sakila             |
| sys                |
+--------------------+
6 rows in set (0.000 sec)

MariaDB [sakila]> use sakila;
Database changed
MariaDB [sakila]> show tables;
+----------------------------+
| Tables_in_sakila           |
+----------------------------+
| actor                      |
| actor_info                 |
| address                    |
| category                   |
| city                       |
| country                    |
| customer                   |
| customer_list              |
| film                       |
| film_actor                 |
| film_category              |
| film_list                  |
| film_text                  |
| inventory                  |
| language                   |
| nicer_but_slower_film_list |
| payment                    |
| rental                     |
| sales_by_film_category     |
| sales_by_store             |
| staff                      |
| staff_list                 |
| store                      |
+----------------------------+
23 rows in set (0.001 sec)

MariaDB [sakila]> source sakila-data.sql;


-----------------------------------
정리..
C:\Windows\system32>d:

D:\>cd sakila-db

MariaDB [(none)]>sours sakila-schema.sql;
MariaDB [sakila]> source sakila-data.sql;

-------------------------------------------------------------------
-------------------------------------------------------------------

-- Single Line Comments
/*

 Multi Line Comments
*/


SELECT NOW();

----------->
NOW()
2023-05-08 10:17:24

------------------------------------

/*
	char(255) - 고정길이 (주민등록번호, 전화번호등.. 일률적인게 속도가 빠르다. 최대값 255)
	varchar(65535) - 가변길이 
	text - 
	mediumtext
	longtext
*/

SHOW character SET;


----------------------------------

/*
	tinyint
	부호가 있는 -128 ~ 127
	부호가 없는 0 ~ 255

*/


/*
	int
	bigint
	flat(p,s)
	double(p,s)

-- 실수는 잘 안씀
*/


google, world 서비스에서는
timestamp사용

아닌경우
datetime사용

날짜만
date사용

시간만
time사용


-------------------------------------------------
pk로 쓸수있는..

대리키
id
대표하는 아무의미없는 숫자

비지니스키, 자연키
주민번호
의미있는

대리키를 쓰는게 변경될 이유가 없고 속도가 더 빠르다.

-----------------------------------------------------------

1:1관계
주민번호같은 유일한
보통 같은 테이블안에 있다.

1:N
여러가지 값을 가지지만
오로지 내꺼인 경우

N:M
사람과 음식의 관계
한 사람이 여러 음식을 좋아할 수 있고
여러사람이 같은 음식을 좋아할 수 있다

무결성은 정규화를 3개정도까지...

pk(나자신의 레코드들의 대표값 : 대표키, primary key),
fk(내가 참조한 외부의 대표값 : 외래키,foreign key)

스키마 - 제약조건
fk를 연결하면 그 안에 있는 값만 넣을수 있다
실수를 안하게금 도와줌
---------------------------------------------------------
스키마문


CREATE TABLE person (
	person_id INT UNSIGNED
	, fname VARCHAR(20)
	, lname VARCHAR(20)
	, eye_color CHAR(2) CHECK(eye_color IN('BR', 'BL', 'GR'))
	-- , eye_color CHAR(2) ENUM('BR', 'BL', 'GR')
	, birth_date DATE
	, street VARCHAR(20)
	, city VARCHAR(20)
	, state VARCHAR(20)
	, country VARCHAR(20)
	, postal_code VARCHAR(20)
	, PRIMARY KEY (person_id)
);

CREATE TABLE favorite_food (
	person_id INT unsigned
	, food VARCHAR(20)
	, PRIMARY KEY(person_id, food)
);


DESC person;

--------------------------------------------

-- CRUD
INSERT INTO person
()
VALUES
();


>>>>>>>>>>>>

-- CRUD
INSERT INTO person
(
	person_id, fname, lname, eye_color, birth_date
)
VALUES
();

>>>>>>>>>>>

-- CRUD
-- C
INSERT INTO person
(
	person_id, fname, lname, birth_date, eye_color
)
VALUES
(
	1, 'William', 'Turner', '1972-05-27', 'BR'
);

-- R
SELECT person_id, fname, lname, birth_date
FROM person;

-- *는 all
-- SELECT *
-- FROM person;

-------------------------------------------------------------------

INSERT INTO favorite_food
(
	person_id, food
)
VALUES
(
	1, 'pizza'
);


INSERT INTO favorite_food
(
	person_id, food
)
VALUES
(
	1, 'cookies'
);


INSERT INTO favorite_food
(
	person_id, food
)
VALUES
(
	1, 'nachos'
);


>>>>>>>>>>>>>>>>>>줄이기

INSERT INTO favorite_food
(
	person_id, food
)
VALUES
(
	1, 'pizza'
),
(
	1, 'cookies'
),
(
	1, 'nachos'
);


--------------------------------------------------------

-- 전체삭제.. 알림있음 
DELETE FROM favorite_food;


-- 전체삭제, 진짜 삭제할껀지 안물어봄, 대신 더 빠름
TRUNCATE favorite_food;

-- where문? 으로 삭제할것...

--------------------------------------------------------

XML
SELECT * FROM favorite_food
FOR XML;

확장이 가능한...?

Gson, Jackson2

JSON
JavaScript Object Motation

-------------------------------------------

-- update문 (수정문)
UPDATE person
SET fname = '윌리엄'
, lname = '터너'
, country = '대한민국'
WHERE person_id = 1;

----------------------------------------------------

update문으로 insert를할 수 있다(더 가독성이 좋음)

INSERT INTO  person
SET person_id = 2
, fname = '길동'
, lname = '홍'
, birth_date = '1980-05-27'
, eye_color = 'GR';

----------------------------------------------------

--  yyyy-MM-dd
UPDATE person
SET birth_date = STR_TO_DATE('DEC-21-1980', '%b-%d-%Y')
WHERE person_id = 1;

SELECT STR_TO_DATE('DEC-21-1980', '%b-%d-%Y');

------------------------------------------------------


p.73
샤키라 테이터베이스
표2-9
테이블명 정의
film / 출시되어 대여할 수 있는 영화
actor 영화에 출연하는 배우
customer / 영화를 보는 고객
category / 영화장르
payment / 고객이 지불한 영화 대여로
language / 영화배우들이 말하는 언어
film_actor / 영화 속 배우
inventory / 대여가능한 영화 여부



------------------------------------------------------------
p.80 쿼리절
표 3-1쿼리절
select, form 필수!



-----------------------

SELECT 
	NAME
	, 'common' 
FROM language;

NAME 옆에 common을 추가해줘

SELECT 
	NAME
	, 'common' AS languge_usage
	
FROM language;

-- 실제로 바뀌는 건 아님 셀렉트 결과에서만 바뀌어서 보인다.

>>>>>>>>>>>>>>>>>>>>

SELECT 
	NAME
	, 'common' AS languge_usage
	, language_id * 3.1415927 AS lang_pi_value
FROM language;

-- 컬럼명이 language_id * 3.1415927경우 가져올수없기 때문에 AS lang_pi_value


>>>>>>>>>>>>>>>>>>>>


SELECT 
	NAME
	, 'common' AS languge_usage
	, language_id * 3.1415927 AS lang_pi_value
	, UPPER(NAME) AS language_name
	, NAME + 'man'
	, CONCAT(NAME, 'man', 'yep')
FROM language;

-- CONCAT는 문자열 합치기

>>>>>>>>>>>>>>>>>>>>>>>>>>>

SELECT 
	NAME
	, 'common' AS languge_usage
	, language_id * 3.1415927 AS lang_pi_value
	, UPPER(NAME) AS language_name
	, NAME + 'man'
	, CONCAT(NAME, 'man', 'yep') AS another_name
FROM language;

-- 컬럼명은 언제든 바꿀수 있음 

----------------------------------------
SELECT 
	NAME
	, 'common' AS languge_usage
	, FLOOR(language_id * 3.1415927) AS lang_pi_value
	, UPPER(NAME) AS language_name
	, NAME + 'man'
	, CONCAT(NAME, 'man', 'yep') AS another_name
FROM language;

-- , FLOOR(language_id * 3.1415927) AS lang_pi_value 정수로 변경...


---------------------------------------

SELECT actor_id FROM film_actor ORDER BY actor_id;
-- 배우명을 오름차순으로 보여줘

SELECT actor_id FROM film_actor ORDER BY actor_id DESC;
-- 배우명을 내림차순으로 보여줘

SELECT distinct actor_id FROM film_actor ORDER BY actor_id DESC;
-- 중복제거, 보이는 레코드에서만.. 

-- DESC 테이블명; 를 설명해달라

-- film_actor(200r x 1c) 200개의 열row 1개의 행culum?

-------------------------------------------------------------------

p.86 From절

영구테이블 삭제하기 전까지 존재하는 테이블
파생테이블 셀릭트문 안에 셀렉트문 가능 서브쿼리
임시테이블 ???????????
가상 테이블 명령어가 저장되어있는 테이블 view??


임시테이블
SELECT
	concat(cust.first_name, cust.last_name) AS full_name
FROM (
	SELECT first_name, last_name, email
	FROM customer
	WHERE FIRST_NAME = 'JESSIE'
) AS cust;

-- 두개의 테이블을 임시로 가져와서 합칠 때 
-- select 안에 서브seclect
-- 스칼라값 레코드 하나의 레코드만 리턴이 가능하며, 두개 이상의 레코드는 리턴할 수 없다.

------------------------------------------------------------

p.90 테이블 연결 join ,DB22


SELECT A.rental_id, A.renatl_date, A.return_date, A.customer_id
FROM rental A;
-- join을 할때 알리아스를 줘야해서 의미없는 A를 주고 A.로 표기

SELECT B.customer_id, B.first_name, B.last_name
FROM customer B;

-- 모두 블락, 선택실행 ctrl +F9

>>>>>>>>>>>>>>>>>>>>>>>>>>

SELECT 
A.rental_id, A.rental_date, A.return_date, A.customer_id
, B.first_name, B.last_name
FROM rental A
INNER JOIN customer B
ON A.customer_id = B.customer_id;

SELECT B.customer_id, B.first_name, B.last_name
FROM customer B;

--ON 어디어디를 참조했다


>>>>>>>>>>>>>>>>>>>>>>>>>>>

SELECT 
A.rental_id, A.rental_date, A.return_date, A.customer_id
, B.first_name, B.last_name
FROM rental A
INNER JOIN customer B
ON A.customer_id = B.customer_id
ORDER BY rental_id DESC;

SELECT B.customer_id, B.first_name, B.last_name
FROM customer B;

-- ORDER는 순서 ORDER BY 기준으로 순서를 정하겠다.
-- DESC 내림차순
>>>>>>>>>>>>>>>>>>>>>>>>>>>

SELECT 
A.rental_id, A.rental_date, A.return_date, A.customer_id
, B.first_name, B.last_name
FROM rental A
INNER JOIN customer B
ON A.customer_id = B.customer_id
WHERE return_date IS null
ORDER BY rental_id DESC;

SELECT B.customer_id, B.first_name, B.last_name
FROM customer B;


-- is null / is not null : null인것만 , null이 아닌것만

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

SELECT 
	A.rental_id, A.rental_date, IFNULL(A.return_date,'반납안했음'), A.customer_id
	, B.first_name, B.last_name
FROM rental A
INNER JOIN customer B
ON A.customer_id = B.customer_id
ORDER BY rental_id DESC;

SELECT B.customer_id, B.first_name, B.last_name
FROM customer B;

-- DB23

>>>>>>>>>>>>>>>>>>>>>>

SELECT 
	A.rental_id, A.rental_date
	, IFNULL(A.return_date,'반납안했음') AS return_date
	, A.customer_id
	, B.first_name, B.last_name
FROM rental A
INNER JOIN customer B
ON A.customer_id = B.customer_id
ORDER BY rental_id DESC;

SELECT B.customer_id, B.first_name, B.last_name
FROM customer B;



-------------------------------------------------------
-- DB24
-- 정렬된것 중에 정렬하기

SELECT * FROM film_actor
ORDER BY actor_id DESC, film_id;

-------------------------------------------------------

-- 'California'값만 알고있다. 미국 주중에 California에 사는 소비자 정보가 궁금하다

SELECT *
FROM customer A
	INNER JOIN address B
	ON A.address_id = B.address_id
WHERE B.district = 'California';


SELECT *
FROM customer
WHERE addres_id IN (
	SELECT address_id FROM address
	WHERE district = 'California'
);

SELECT *
FROM customer A
INNER JOIN (
	SELECT address_id FROM address
	WHERE district = 'California'
) B
ON A.address_id = B.address_id;


SELECT address_id
FROM address
WHERE district = 'California';
	

-------------------------------------------------------------

film_actor actor_id film_id

film film_id title

actor actor_id first_name last_name


















































































































































