select now(),'haha';
select now() from dual;

select*, 'haha' from my_dual;
-- 레코드 마다 찍는다



create table my_dual(
	col CHAR(1) not null
);
select*, 'haha' from my_dual;
-- 아무것도 나오지 않음

>>>>>>>>>>>>>>>>>>
create table my_dual(
	col CHAR(1) not null
);

insert into  my_dual
set cal = 'x';

select * from my_dual;

select*, 'haha' AS co12, now()
from my_dual;


-----------------------------------

p.92 where절


 SELECT *
FROM film
WHERE rating = 'G' AND rental_duration >=7;

-- select from where group having order-by limit 서순

-- 등급이 'G'면서 빌릴수 있는 기간이 7일 이상인 레코드



-- 등급이 'G'면서 빌릴 수 있는 기간이 7일 이상인 레코드
-- 그리고 등급이 'PG-13'이면서 빌릴 수 있는 기간이 4미만인 모든 레코드
-- 모든 레코드, 컬럼은 (제목, 등급, 빌릴 수 있는 기간)

SELECT title, rating, rental_duration
FROM film
WHERE (rating = 'G' AND rental_duration >=7)
OR (rating = 'PG-13' AND rental_duration <4);

-------------------------------------------------------------------

-- group by

-- group function 그룹함수
-- sum, avg, min, max, count
SELECT * FROM customer;



SELECT COUNT(*) FROM customer;
-- 전체가 한 구룹  ---> count(*) 599


SELECT COUNT(*), SUM(active)
, COUNT(*) - SUM(active) 
, MAX(address_id)
, MIN(address_id)
, AVG(address_id)
FROM customer;

-- 그룹별로 최대값 평균값 최소값 등을 구할수있다.

>>>>>>>>>>>>>

SELECT COUNT(*), SUM(active)
, COUNT(*) - SUM(active) 
, MAX(address_id)
, MIN(address_id)
, floor(AVG(address_id)) 'AVG(address_id)' 
FROM customer;

--------------------------------------------------------

DB26

SELECT store_id, COUNT(*)
FROM customer
GROUP BY stoer_id;

-- 그룹을 만들어서 그룹별로 최대값 평균값 최소값 등을 구할수있다.
-- 1번은 1번끼리 2번은 2번끼리
-- 그래서 그룹에 2개만 나옴


>>>>>>>>>>>>>>>>>>>>

SELECT store_id, COUNT(*)
FROM customer
WHERE active = 1
GROUP BY store_id
HAVING COUNT(*) >= 300
ORDER BY store_id;

-- WHERE는 GROUP전에 미리 분류
-- COUNT(*)가 300 이상인것만 나오도록 
-- group by의 where절 그룹을 빼고 싶을때
-- where절과 다른점 where은 모든 데이터 중에 having은 그룹들 중에서 




-----------------------------------------------------------------------
p.101학습점검

-- 3.8.1
-- 모든 배우 ID, 이름 빛 성을 검색합니다. 성 기준으로 정렬한 다음 이름 기준으로 정렬합니다.
SELECT actor_id, first_name, last_name
FROM actor
ORDER BY last_name, first_name;


-- 3.8.2
-- 성이 'williams' 또는 'davis'인 모든 배우의 배우 ID, 이름 및 성을 검색합니다.
SELECT actor_id, first_name, last_name 
FROM actor
WHERE last_name = 'Williams' OR last_name = 'davis';


-- 3.8.3
SELECT distinct rental_id
FROM rental
WHERE DATE(rental_date) = '2005-07-05'
ORDER BY customer_id;
-- 중복된값 제거 distinct
-- DATE(rental_date)를 사용하면 시간요소를 무시할 수 있다.


-- 3.8.4
SELECT c.email, r.return_date
FROM customer c
	INNER JOIN rental <#1>
	ON c.customer_id = <#2>
WHERE DATE(r.rental_date) = '2005-06-14'
ORDER BY <#3> <#4>;

>>>>>>>>>>>>>>>>>>

SELECT c.email, r.return_date
FROM customer c
	INNER JOIN rental r
	ON c.customer_id = r.customer_id
WHERE DATE(r.rental_date) = '2005-06-14'
ORDER BY r.return_date desc;

-- ORDER BY에 , 이 없기 때문에 잘 확인 해볼것 


----------------------------------------------------------------------
p.104 조건평가

SELECT * FROM customer
WHERE first_name = 'steven'
or create_date > '2006-01-01';

-- 이름은 steven이고, 생성 날짜는 2006년 1월 1일 또는 그 이전
SELECT *
FROM customer
WHERE first_name = 'steven'
AND create_date <= '2006-01-01';

-- 이름은 steven이 아니지만, 생성 날짜는 2006년 01 월 01일 이후
SELECT *
from customer 
WHERE first_name != 'steven'
AND create_date > '2006-01-01';

-- 이름은 steven이 아니거나 성이 'young'인 사람중에
-- 생성날짜가 2006년 1월 1일 이후 인사람들
SELECT *
FROM customer
WHERE (first_name != 'steven' OR last_name = 'young') 
AND create_date >'2006-01-01'; 

-- 이름은 steven이 아니거나 성이 'young'이 아닌 사람중에
-- 생성날짜가 2006년 1월 1일 이후 인사람들
SELECT *
FROM customer
WHERE (first_name != 'steven' OR last_name != 'young')
AND create_date > '2006-01-01';  


------------------------------------------------------------------------------

-- 내가 알고있는건 title인 file_id: 762, sassy packer 밖에 모름, 대여기간보다 짧은 영화만 알고싶다
SELECT *
FROM film
WHERE rental_duration < (SELECT rental_duration
			FROM film
			WHERE film_id = 762);


------------------------------------------------------------------------------
-- '2005-06-14'일날 렌탈을 한 사람들의 이메일을 알고싶다.
SELECT distinct c.email
FROM rental r
	INNER JOIN customer c
	ON c.customer_id = r.customer_id
WHERE DATE(r.rental_date) = '2005-06-14'
ORDER BY c.email;

-----------------------------------------------------------------------------

-- 2004, 2005년을 제외한 렌탈정보를 알고싶다.

SELECT *
FROM rental
WHERE YEAR(rental_date) NOT IN(2004, 2005);


----------------------------------------------------------------------------

p.115 콜레이션 collation
캐릭터셋 내에 문자가 정렬되는 순서 규칙을 콜레이션이라고 한다.

select 'AAB' < 'AABB'; 
-- true

select '김고은' < '김구';
-- true

---------------------------------------------------------------------------

-- 영화 등급이 'G'혹은 'PG'인 영화 정보를 알고싶다.
SELECT *
FROM film
WHERE rating IN ('G','PG');


---------------------------------------------------------------------------

-- 제목에 pet이 포함된 영화와 같은 등급을 가진 영화가 궁금하다.

SELECT *
FROM film
WHERE rating IN (
	SELECT distinct rating
	FROM film
	WHERE title LIKE '%pet%'
	);

--------------------------------------------------------------------------
-- 등급이 'PG-13', 'R', 'NC-17'이 아닌 영화 정보 알고싶다.
SELECT *
FROM film
WHERE rating != 'PG-13' AND rating != 'R' AND rating != 'NC-17';

>>>>>>>>>>>>>>>>>>>>>>>>

SELECT *
FROM film
WHERE rating NOT IN('PG-13', 'R', 'NC-17');

-------------------------------------------------------------------------
DB30

java의 sub string 문자열 함수
SELECT LEFT('abcdefg', 2), RIGHT('abcdefg', 2), MID('abcdefg', 1, 3);


-------------------------------------------------------------------------
DB31
-- 문자함수 이용하여 고객 성이'Q'로 시작하는 사람 궁금하다.

SELECT last_name 
from customer
WHERE LEFT(last_name, 1) = 'Q';

-------------------------------------------------------------------------

























































