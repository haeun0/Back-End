- 페이징
- entity에 created가 없더라도 계속 생기게 하는 방법
	confing에 BaseEntity 생성

package com.green.jpaexam.config;

import jakarta.persistence.Column;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.MappedSuperclass;
import lombok.Data;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@Data
@MappedSuperclass
@EntityListeners(AuditingEntityListener.class) // 감시?
public class BaseEntity {

    @CreatedDate // 스프링에서 지원해주는 어노테이션
    @CreationTimestamp // 하이버네이트에서 지원해주는 어노테이션 위랑 똑같음
    @Column(updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @UpdateTimestamp
    private LocalDateTime updatedAt;
}



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++수정

package com.green.jpaexam.product.model;

import com.green.jpaexam.config.BaseEntity;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

@Data
@Table(name = "t_product")
@EqualsAndHashCode
//동등성과 동일성 : 데이터가 같으면 등성성(객체가 다름) 객체가 같으면 동일성
@Entity

@NoArgsConstructor
@AllArgsConstructor
@Builder
public class ProductEntity extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long number;

    @Column(nullable = false) // notnull
    private String name;

    @Column(nullable = false)
    private Integer price;

    @Column(nullable = false)
    private Integer stock;



}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++생성

package com.green.jpaexam.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;

@Configuration
@EnableJpaAuditing
public class jpaAuditingConfiguration {
}
____________________________________________________________________________________________________________________________________
페이징

    @GetMapping
    public ResponseEntity<List<ProductRes>> getProductAll(@PageableDefault(sort="number", direction = Sort.Direction.DESC, size = 20)Pageable page) {
        return ResponseEntity.ok(service.getProductAll(page));
        //.ok는 200?
    }
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public List<ProductRes> getProductAll(Pageable page) {
        return dao.getProductAll(page);
    }
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    List<ProductRes> getProductAll(Pageable page);
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @Override
    public List<ProductRes> getProductAll(Pageable page) {
        return rep.findAll(page).stream().map(item ->
                ProductRes.builder()
                        .number(item.getNumber())
                        .name(item.getName())
                        .price(item.getPrice())
                        .stock(item.getStock())
                        .build()
        ).toList();
    }
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
swagger
{
  "page": 0,
  "size": 5,
  "sort": [
    "number,desc"
  ]
}

// page 0이 1번 페이지, 2번 페이지를 보고싶으면 1

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
{
  "content": [
    {
      "number": 1003,
      "name": "Latex Rubber Gloves Size 9",
      "price": 5180107,
      "stock": 1321
    },
    {
      "number": 1002,
      "name": "Wine - Magnotta - Red, Baco",
      "price": 7153687,
      "stock": 1036
    },
    {
      "number": 1001,
      "name": "Wine - Zonnebloem Pinotage",
      "price": 7831000,
      "stock": 1124
    },
    {
      "number": 1000,
      "name": "Oil - Sunflower",
      "price": 2018192,
      "stock": 879
    },
    {
      "number": 999,
      "name": "Steampan - Foil",
      "price": 106024,
      "stock": 1308
    },
    {
      "number": 998,
      "name": "Greens Mustard",
      "price": 8337800,
      "stock": 1089
    },
    {
      "number": 997,
      "name": "Beef - Texas Style Burger",
      "price": 4249105,
      "stock": 378
    },
    {
      "number": 996,
      "name": "Vinegar - Balsamic, White",
      "price": 8484439,
      "stock": 1599
    },
    {
      "number": 995,
      "name": "Raisin - Golden",
      "price": 1507772,
      "stock": 1975
    },
    {
      "number": 994,
      "name": "Trout - Hot Smkd, Dbl Fillet",
      "price": 7440148,
      "stock": 255
    }
  ],
  "pageable": {
    "sort": {
      "empty": false,
      "sorted": true,
      "unsorted": false
    },
    "offset": 0,
    "pageSize": 10,
    "pageNumber": 0,
    "paged": true,
    "unpaged": false
  },
  "last": false,
  "totalElements": 1003,
  "totalPages": 101,
  "size": 10,
  "number": 0,
  "sort": {
    "empty": false,
    "sorted": true,
    "unsorted": false
  },
  "first": true,
  "numberOfElements": 10,
  "empty": false
}

//last:false 마지막 페이지가 아님
____________________________________________________________________________________________________________________________________



https://www.canva.com/templates/EAFnfAbBRIw-brown-green-orange-creative-summer-camp-presentation/

https://www.canva.com/templates/EAFf2LlB4Lc-biotic-and-abiotic-factors-in-the-environment-science-presentation-in-dark-green-beige-hand-drawn-style/


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
____________________________________________________________________________________________________________________________________
Baeldung 사이트

삭제한 model

@Data
public class ItemInsParam {
    private Long iitemCategory;
    private String name;
    private int price;
    private String pic;
}


-------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Data;
@Data
public class ItemSearchDto {
    private String text;
    private int startIdx;
    private int page;
    private int row;
}
-------------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Builder;
import lombok.Data;
import lombok.Getter;

import java.util.List;

@Builder
@Getter
public class ItemSearchRes {
    private String text;
    private int row;
    private int startIdx;
    private int page;
    private List<ItemVo> list;
}

-----------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Data;

import java.time.LocalDate;

@Data
public class ItemSelBest {
    private Long iitem;
    private String name;
    private String pic;
    private int price;
    private LocalDate monthLike;
}

-------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Data;

import java.time.LocalDate;

@Data
public class ItemSelBest {
    private Long iitem;
    private String name;
    private String pic;
    private int price;
    private LocalDate monthLike;
}

------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Data;

@Data
public class ItemSelCateDto {
    private Long iitemCategory;
    private int startIdx;
    private int page;
    private int row;
}
------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Data;

@Data
public class ItemSelDto {
    private int startIdx;
    private int page;
    private int row;
}

------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Data;
import lombok.ToString;

@Data
@ToString
public class SelCategory {
    private Long iitemCategory;
    private String categoryName;
}

--------------------------------------------------------
package com.green.campingsmore.item.model;

import lombok.Builder;
import lombok.Data;
import lombok.Getter;

import java.util.List;

@Builder
@Getter
public class ItemRes {
    private int row;
    private int maxPage;
    private int page;
    private List<ItemVo> list;


}

/////////////////////////////////////////////////////////////////////////////////////

package com.green.campingsmore.review.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.springframework.web.multipart.MultipartFile;

import java.time.LocalDateTime;
@Data
@NoArgsConstructor
@ToString
public class ReviewInsRes {
    private Long ireview;
    private Long iuser;
    private Long iorder;
    private Long iitem;
    private String reviewCtnt;
    private String pic;
    private LocalDateTime createdAt;
    private int finishYn;

/*    public ReviewInsRes(ReviewInsDto dto) {
        this.iuser = dto.getIuser();
        this.iorder = dto.getIorder();
        this.iitem = dto.getIitem();
        this.reviewCtnt = dto.getReviewCtnt();
        this.pic = dto.pic;
    }*/
}

------------------------------------------------------

package com.green.campingsmore.review.model;

import lombok.Data;

@Data
public class ReviewPicDto {
    private Long iuser;
    private Long ireview;
    private String pic;
}

